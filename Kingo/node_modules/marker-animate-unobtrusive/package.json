{
  "//": "you can use something like git+https://github.com/viskin/marker-animate.git#OverlappingMarkerSpiderfier",
  "_args": [
    [
      {
        "raw": "marker-animate-unobtrusive",
        "scope": null,
        "escapedName": "marker-animate-unobtrusive",
        "name": "marker-animate-unobtrusive",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/home/webskitters/Projects/Kingo"
    ]
  ],
  "_from": "marker-animate-unobtrusive@latest",
  "_id": "marker-animate-unobtrusive@0.2.8",
  "_inCache": true,
  "_location": "/marker-animate-unobtrusive",
  "_nodeVersion": "4.2.2",
  "_npmOperationalInternal": {
    "host": "packages-6-west.internal.npmjs.com",
    "tmp": "tmp/marker-animate-unobtrusive-0.2.8.tgz_1455885651355_0.009282306302338839"
  },
  "_npmUser": {
    "name": "terikon",
    "email": "npm@terikon.com"
  },
  "_npmVersion": "2.14.11",
  "_phantomChildren": {},
  "_requested": {
    "raw": "marker-animate-unobtrusive",
    "scope": null,
    "escapedName": "marker-animate-unobtrusive",
    "name": "marker-animate-unobtrusive",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/marker-animate-unobtrusive/-/marker-animate-unobtrusive-0.2.8.tgz",
  "_shasum": "6e92226781169567ebfb7defaac2bcf8995da23d",
  "_shrinkwrap": null,
  "_spec": "marker-animate-unobtrusive",
  "_where": "/home/webskitters/Projects/Kingo",
  "author": {
    "name": "Terikon Apps",
    "email": "npm@terikon.com",
    "url": "http://il.linkedin.com/in/romanviskin"
  },
  "bugs": {
    "url": "https://github.com/terikon/marker-animate-unobtrusive/issues"
  },
  "dependencies": {
    "jasmine-core": "^2.3.4",
    "jquery": "*",
    "marker-animate": "^0.0.1"
  },
  "description": "Unobtrusive Google Maps animated marker",
  "devDependencies": {
    "grunt": "^0.4.5",
    "grunt-contrib-jasmine": "^0.9.2",
    "grunt-contrib-jshint": "^0.11.3",
    "grunt-contrib-uglify": "^0.9.2"
  },
  "directories": {},
  "dist": {
    "shasum": "6e92226781169567ebfb7defaac2bcf8995da23d",
    "tarball": "https://registry.npmjs.org/marker-animate-unobtrusive/-/marker-animate-unobtrusive-0.2.8.tgz"
  },
  "gitHead": "07b6e4598bb89cd07af1b07092493bbbb6fa2940",
  "homepage": "https://github.com/terikon/marker-animate-unobtrusive",
  "keywords": [
    "Google Maps",
    "marker",
    "marker animation",
    "SlidingMarker"
  ],
  "license": "MIT",
  "main": "SlidingMarker.js",
  "maintainers": [
    {
      "name": "terikon",
      "email": "npm@terikon.com"
    }
  ],
  "name": "marker-animate-unobtrusive",
  "optionalDependencies": {},
  "readme": "# marker-animate-unobtrusive aka SlidingMarker\r\n\r\n[![Build Status](https://travis-ci.org/terikon/marker-animate-unobtrusive.svg?branch=master)](https://travis-ci.org/terikon/marker-animate-unobtrusive)\r\n\r\nEnables a Google Maps marker to move from its original position to its destination in a natural, animated way\r\n(unlike the current method of suddenly appearing on the destination spot). Please click on the map below in order to see\r\nhow it works. Select destination on the map to move marker to.\r\n\r\n[![alt tag](http://terikon.github.io/marker-animate-unobtrusive/demo/screenshots/SlidingMarker.jpg)](http://terikon.github.io/marker-animate-unobtrusive/demo/unobtrusive/markermove-sliding.html)\r\n\r\nIt can work in two modes.\r\n\r\n- In one mode, you create SlidingMarker instead of google.maps.Marker. SlidingMarker inherits google's\r\nmarker, so working with it is pretty straight-forward.\r\n\r\n- In other mode, SlidingMarker replaces google.maps.Marker with itself, so you just can just forget about it and enjoy\r\nnice and smooth movement of all of your markers.\r\n\r\nIn both cases, animated and non-animated marker will behave exactly the same.\r\n\r\nmarker.getPosition() will always return final destination of marker, and position_changed event will only trigger when\r\nmovement starts. That's why it called unobtrusive - your current code will not even notice animation, it's completely\r\ntransparent.\r\n\r\nSlidingMarker is a complete rewrite of markerAnimateUnobtrusive library, with much-much more features and greatly improved\r\narchitecture.\r\n\r\n# Table of contents\r\n\r\n- [Install](#install)\r\n- [Use](#use)\r\n- [Demo](#demo)\r\n- [API](#api)\r\n- [AMD](#amd)\r\n- [MarkerWithGhost](#markerwithghost)\r\n- [Integration with OverlappingMarkerSpiderfier](#integration-with-overlappingmarkerspiderfier)\r\n- [Under the hood](#under-the-hood)\r\n- [Things to consider for future versions](#things-to-consider-for-future-versions)\r\n- [Contribute](#contribute)\r\n\r\nThis project is based on excellent [marker-animate](https://github.com/combatwombat/marker-animate) project by Robert Gerlach.\r\n\r\nThis project is one big step towards animated [OverlappingMarkerSpiderfier](https://github.com/jawj/OverlappingMarkerSpiderfier).\r\n\r\n# Install\r\n\r\n## with bower\r\n\r\n```\r\nbower install marker-animate-unobtrusive\r\n```\r\n\r\n## include on page\r\n\r\nDownload **SlidingMarker.js**\r\n[minified](https://raw.githubusercontent.com/terikon/marker-animate-unobtrusive/master/dist/SlidingMarker.min.js) or\r\n[debug](https://raw.githubusercontent.com/terikon/marker-animate-unobtrusive/master/SlidingMarker.js)\r\nfrom Github, and include it in your page.\r\n\r\nSlidingMarker depends on Google Maps and [jquery](http://jquery.com/download) libraries, so include them as well.\r\n\r\njquery.easing may be downloaded from [here](http://gsgd.co.uk/sandbox/jquery/easing/jquery.easing.1.3.js).\r\n\r\nDownload marker-animate [from here](https://raw.githubusercontent.com/combatwombat/marker-animate/master/markerAnimate.js).\r\n\r\nSo dependencies look like follows:\r\n\r\n```html\r\n<!-- Dependencies -->\r\n\r\n<!-- jquery library and jquery.easing plugin are needed -->\r\n<script src=\"jquery.min.js\"></script>\r\n<script src=\"jquery.easing.1.3.js\"></script>\r\n\r\n<!-- we provide marker for google maps, so here it comes  -->\r\n<script src=\"https://maps.googleapis.com/maps/api/js?sensor=false\"></script>\r\n\r\n<!-- we use markerAnimate to actually animate marker -->\r\n<script src=\"markerAnimate.js\"></script>\r\n\r\n<!-- SlidingMarker hides details from you - your markers are just animated automagically -->\r\n<script src=\"SlidingMarker.min.js\"></script>\r\n```\r\nNote: [jQuery](http://jquery.com/download) is soft dependency, you can prefer not to include it. But if you decide not to,\r\nyou should provide [alternative animation routine](#SlidingMarker.options.animateFunctionAdapter), and should not include\r\njquery.easing and markerAnimate libraries.\r\n\r\nAll needed dependencies are in [vendor](https://github.com/terikon/marker-animate-unobtrusive/tree/master/vendor) folder.\r\n\r\n## with npm\r\n\r\n```\r\nnpm install marker-animate-unobtrusive\r\n```\r\n\r\nThe library is compatible with [NW.js](http://nwjs.io). Use it following way:\r\n\r\n```html\r\n<script type=\"text/javascript\" src=\"http://maps.google.com/maps/api/js?sensor=true\"></script>\r\n<script type=\"text/javascript\">\r\n  global.google = google;\r\n</script>\r\n<script type=\"text/javascript\" src=\"app.js\"></script>\r\n```\r\n\r\n```js\r\nvar SlidingMarker = require('marker-animate-unobtrusive');\r\nvar marker = new SlidingMarker();\r\n```\r\n\r\n# Use\r\n\r\n## locally\r\n\r\nWhen you create marker, instantiate SlidingMarker instance with same parameter you used to instantiate google.maps.Marker:\r\n\r\n```js\r\n//old code\r\n//var marker = new google.maps.Marker();\r\n\r\n//new code\r\nvar marker = new SlidingMarker();\r\n```\r\n\r\n## globally\r\n\r\nIf you want to make all markers on map animate, first of all, call SlidingMarker.initializeGlobally() method.\r\nDo it as soon as SlidingMarker script loads, before any other script:  \r\n\r\n```html\r\n<script src=\"SlidingMarker.min.js\"></script>\r\n<script>\r\n  SlidingMarker.initializeGlobally();\r\n</script>\r\n```\r\n\r\nThat's it. Now all marker movements will be animated, e.g. :\r\n\r\n```js\r\nvar marker = new google.maps.Marker();\r\n...\r\nmarker.setPosition(latLng); //Will cause smooth animation\r\n```\r\n\r\n# API\r\n\r\n**SlidingMarker** object that inherits google.maps.Marker is created in global scope (on injected with [AMD](#amd)), with following method in it:\r\n\r\n<a name=\"SlidingMarker.initializeGlobally\"></a>\r\n[SlidingMarker.initializeGlobally()](#SlidingMarker.initializeGlobally) when called, replaces google.maps.Marker with SlidingMarker, so all\r\nmarkers of google maps will be animated.\r\n\r\nSlidingMarker has all the events, methods and options of google.maps.Marker - that's its beauty.\r\n\r\n- **getPosition()** function returns discrete position, instead of animated one. That means that when one calls setPosition()\r\nand animation is in place, getPosition() will return final position instead of intermediate. Use\r\n[getAnimationPosition()](#getAnimationPosition) to retrieve intermediate position.\r\n\r\n- **position_changed** event will be raised one time per call to setPosition(), even when animation is in place. To receive\r\nupdates on animated movement, use [animationposition_changed](#animationposition_changed) event.\r\n\r\nIn addition, following options are supported to fine-tune animation for each marker:\r\n\r\n- **easing** - \"easeInOutQuint\" by default. Possible values are same as in\r\n[jquery.easing](http://gsgd.co.uk/sandbox/jquery/easing/) library.\r\n- **duration** - in ms, 1000 by default.\r\n<a name=\"SlidingMarker.options.animateFunctionAdapter\"></a>\r\n- **animateFunctionAdapter** - by default, SlidingMarker assumes that google.maps.Marker.prototype is enhanced with animateTo method, but you can provide alternative animation adapter. It should be function with following declaration:\r\nanimateFunctionAdapter(marker, destPosition, easing, duration). If destPosition provided is null, adapter should stop animation.\r\n\r\nExample:\r\n\r\n```js\r\nvar marker = new SlidingMarker({\r\n    position: myLatlng,\r\n    map: map,\r\n    title: \"I'm sliding marker\",\r\n    duration: 2000,\r\n    easing: \"easeOutExpo\"\r\n});\r\n...\r\n// use marker as ordinal google map's marker.\r\n// few animation customizations are also possible.\r\nmarker.setDuration(1000);\r\n```\r\n\r\nThere are few additions to SlidingMarker instance:\r\n\r\n<a name=\"SlidingMarker.setDuration\"></a>\r\n[setDuration(duration)](#SlidingMarker.setDuration) sets duration of animation for marker, in ms.\r\n\r\n<a name=\"SlidingMarker.getDuration\"></a>\r\n[getDuration()](#SlidingMarker.getDuration) returns duration of animation.\r\n\r\n<a name=\"SlidingMarker.setEasing\"></a>\r\n[setEasing(easing)](#SlidingMarker.setEasing) sets easing type of animation.\r\n\r\n<a name=\"SlidingMarker.getEasing\"></a>\r\n[getEasing()](#SlidingMarker.getEasing) return easing type.\r\n\r\n<a name=\"SlidingMarker.getAnimationPosition\"></a>\r\n[getAnimationPosition()](#SlidingMarker.getAnimationPosition) returns position of animated marker.\r\n\r\n<a name=\"SlidingMarker.setPositionNotAnimated\"></a>\r\n[setPositionNotAnimated(position)](#SlidingMarker.setPositionNotAnimated) performs original not animated setPosition() on marker.\r\n\r\n<a name=\"SlidingMarker.animationposition_changed\"></a>\r\n[animationposition_changed](#SlidingMarker.animationposition_changed) event is raised when position of visible animated marker changes.\r\n\r\n\r\n# Demo\r\n\r\nDemos reside in [demo](https://github.com/terikon/marker-animate-unobtrusive/tree/master/demo) folder.\r\n\r\nIn following demo you can see that position_changed is called in natural way. Click any point on map to see marker move. \r\n\r\n[![alt unobtrusive](http://terikon.github.io/marker-animate-unobtrusive/demo/screenshots/SlidingMarker.jpg)](http://terikon.github.io/marker-animate-unobtrusive/demo/unobtrusive/markermove-sliding.html)\r\n\r\nYou can use SlidingMarker with other libraries that enhance original marker, like\r\n[MarkerWithLabel](http://google-maps-utility-library-v3.googlecode.com/svn/trunk/markerwithlabel/docs/reference.html) or\r\n[Geolocation Marker](http://google-maps-utility-library-v3.googlecode.com/svn/trunk/geolocationmarker/docs/reference.html).\r\n\r\nIt can be used with [OverlappingMarkerSpiderfier](https://github.com/jawj/OverlappingMarkerSpiderfier) as well:\r\n\r\n[![alt unobtrusive](http://terikon.github.io/marker-animate-unobtrusive/demo/screenshots/oms.jpg)](http://terikon.github.io/marker-animate-unobtrusive/demo/unobtrusive/map-oms-animate.html)\r\n\r\nHere is animated MarkerWithLabel for a first time:\r\n\r\n[![alt unobtrusive](http://terikon.github.io/marker-animate-unobtrusive/demo/screenshots/markerWithLabel.jpg)](http://terikon.github.io/marker-animate-unobtrusive/demo/unobtrusive/markerwithlabelmove-sliding.html)\r\n\r\nHere is animated version of Geolocation Marker:\r\n\r\n[![alt unobtrusive](http://terikon.github.io/marker-animate-unobtrusive/demo/screenshots/geolocationmarker.jpg)](http://terikon.github.io/marker-animate-unobtrusive/demo/unobtrusive/geolocationmarker-sliding.html)\r\n\r\nIt can be used with InfoWindow:\r\n\r\n[![alt unobtrusive](http://terikon.github.io/marker-animate-unobtrusive/demo/screenshots/infowindow.jpg)](http://terikon.github.io/marker-animate-unobtrusive/demo/unobtrusive/markermove-infowindow.html)\r\n\r\nThis demonstrates [MarkerWithGhost](#markerwithghost). Click on map to call setPosition. Right-click to call setGhostPosition.\r\nOnly the \"ghost\" will move, causing no events.\r\n\r\n[![alt unobtrusive](http://terikon.github.io/marker-animate-unobtrusive/demo/screenshots/SlidingMarker.jpg)](http://terikon.github.io/marker-animate-unobtrusive/demo/unobtrusive/markermove-withghost.html)\r\n\r\nSometimes libraries should be slightly modified to make use of animation. Animated versions of MarkerWithLabel and\r\nGeolocation Marker are in [vendor](https://github.com/terikon/marker-animate-unobtrusive/tree/master/vendor) folder.\r\n\r\n# AMD\r\n\r\nmarker-animate-unobtrusive can be used with [requirejs](http://requirejs.org/).\r\n\r\n'jquery' library should be configured with requirejs. marker-animate should be configured as well.\r\n\r\n```js\r\nrequirejs.config({\r\n  shim: {\r\n    \"jquery-easing\": [\"jquery\"],\r\n    \"marker-animate\": { deps: [\"jquery-easing\"] }\r\n  }\r\n});\r\n```\r\n\r\nThe usage is simple:\r\n\r\n```js\r\ndefine(['SlidingMarker'], function (SlidingMarker) {\r\n\t//Use it here\r\n}\r\n``` \r\n\r\n# MarkerWithGhost\r\n\r\nIn addition to SlidingMarker, you can use MarkerWithGhost class. It useful in less scenarios. Example scenario is usage\r\nwith [OverlappingMarkerSpiderfier](https://github.com/jawj/OverlappingMarkerSpiderfier).\r\n\r\nMarkerWithGhost provides \"ghost\" mode. When this mode active, the marker moves as usual, but fires no position_changed\r\nevents. It's position returned by getPosition method will not change either.\r\n\r\nGhost mode is activated by calling setGhostPosition method. It will deactivate as soon as you call to plain setPosition().\r\n\r\nGhost will move always and provide ghostPosition property, as well as ghostposition_changed event. When not in \"ghost mode\",\r\nit will move with marker. When \"ghost mode\" is active, the ghost will move instead of marker.\r\n\r\n## API of MarkerWithGhost\r\n\r\nMarkerWithGhost inherits SlidingMarker.\r\n\r\n<a name=\"MarkerWithGhost.initializeGlobally\"></a>\r\n[MarkerWithGhost.initializeGlobally()](#MarkerWithGhost.initializeGlobally) works just as [same method](#SlidingMarker.initializeGlobally)\r\nof SlidingMarker.\r\n\r\n### instance methods\r\n\r\n<a name=\"MarkerWithGhost.setGhostPosition\"></a>\r\n[setGhostPosition(ghostPosition)](#MarkerWithGhost.setGhostPosition) starts \"ghost mode\". Marker moves to provided position,\r\nbut will not fire position_changed event, and it's position property will not change. To exit \"ghost\" mode call setPosition().\r\n\r\n<a name=\"MarkerWithGhost.getGhostPosition\"></a>\r\n[getGhostPosition()](#MarkerWithGhost.getGhostPosition) returns position of ghost. If not in ghost mode, it will be equal to\r\nposition property.\r\n\r\n<a name=\"MarkerWithGhost.getGhostAnimationPosition\"></a>\r\n[getGhostAnimationPosition()](#MarkerWithGhost.getGhostAnimationPosition) return animation position of ghost. If not in \r\nghost mode, it will be equal to animationPosition property.\r\n\r\n### events\r\n\r\n<a name=\"MarkerWithGhost.ghostposition_changed\"></a>\r\n[ghostposition_changed](#MarkerWithGhost.ghostposition_changed) fires as position of ghost changes. If not in ghost mode,\r\nit still will fire.\r\n\r\n<a name=\"MarkerWithGhost.ghostanimationposition_changed\"></a>\r\n[ghostanimationposition_changed](#MarkerWithGhost.ghostanimationposition_changed) fires as animationPosition of ghost\r\nchanges. If not in ghost mode, it still will fire.\r\n\r\n# Integration with OverlappingMarkerSpiderfier\r\n\r\nIt's possible to add animation to glorious [OverlappingMarkerSpiderfier](https://github.com/jawj/OverlappingMarkerSpiderfier)\r\nproject by George MacKerron. You can see a demo here, just click a bunch of markers to see them move:\r\n\r\n[![alt unobtrusive](http://terikon.github.io/marker-animate-unobtrusive/demo/screenshots/oms.jpg)](http://terikon.github.io/marker-animate-unobtrusive/demo/unobtrusive/map-oms-animate.html)\r\n\r\n*Declaimer: I think this demo is one of few things one can stare are indefinitely, along with classic Windows Defragmenter and Mac\r\nminimize animation :)*\r\n\r\nTo achieve this, slightly modified version of oms.js was used that you can find in\r\n[vendor folder](https://github.com/terikon/marker-animate-unobtrusive/tree/master/vendor), or\r\nin [this github fork](https://github.com/viskin/OverlappingMarkerSpiderfier/tree/animation).\r\n\r\nFor curious ones, the trick to make OverlappingMarkerSpiderfier support animation is to use [MarkerWithGhost](#markerwithghost) instead\r\nof plain google.maps.Marker, and make oms.js call ghosted properties, e.g. to getGhostPosition() instead of\r\ngetPosition().\r\n\r\nAdditional bonus arises from using MarkerWithGhost, and it is that no unnecessary position_changed events are triggered\r\nwhen spiderfying occurs. For you, getPostion on your marker will return its actual position, and will not be effected by spiderfier.\r\n\r\n# Under the hood\r\n\r\n## Imperfection of marker-animate\r\n\r\nHere's demonstration of difficulties we met with original [marker-animate](https://github.com/combatwombat/marker-animate) library.\r\n\r\n- With it you should call animateTo() method instead of usual setPosition(). We wanted fire-and-forget functionality,\r\nso all markers will just animate.\r\n- Huge issue is that original library causes masses of position_changed event while marker is being animated. You can see it in this demo (of original library), with large amount of position_changed event occur: \r\n\r\n[![alt obtrusive](http://terikon.github.io/marker-animate-unobtrusive/demo/screenshots/obtrusive.jpg)](http://terikon.github.io/marker-animate-unobtrusive/demo/obtrusive/markermove-obtrusive.html)\r\n\r\n- While marker moves in original library, it reports its intermediate position when getPosition() called. If we call\r\nmarker.setPosition(point), we want to receive the point from marker.getPosition(), and not some useless animation state.\r\n\r\nThese facts prevents marker-animate from usage with other libraries that depend on markers.\r\n\r\n## Architecture of SlidingMarker\r\n\r\nThe solution was to use decorator pattern. SlidingMarker inherits google.maps.Marker, so it can be used anywhere just like\r\ngoogle.maps.Marker itself. For example, following is true:\r\n\r\n```js\r\nSlidingMarker instanceof google.maps.Marker // true \r\n```\r\n\r\nBut this marker is never attached to the map, even if you call marker.setMap(map). Instead, there's another visible marker,\r\ncalled _instance, that is attached to the map. You work directly with marker, and every operation you perform on marker is \r\nredirected to _instance. For example, getMap() method called on marker will call getMap() on _instance .\r\n\r\nEvery user event, like click, that triggers on visible _instance marker is redirected back to marker itself.\r\n\r\nThis way animation that occur on visible _instance does not interfere with invisible marker that you work with.\r\n\r\nSo, storing SlidingMarker takes *2 memory than storing instance of google.maps.Marker. \r\n\r\n# Things to consider for future versions\r\n\r\n- ~~ Make it possible to use any easing library, not just jquery_easing ~~\r\n- Make it possible to restore google maps to original state after initializeGlobally() called.\r\n- Make it possible to stop animation. Animation should stop as well when setPositionNotAnimated is called.\r\n- Improve speed.\r\n- Provide support for alternative animation engine, e.g. [Velocity](http://julian.com/research/velocity/).\r\n- Compile with closure-compiler. Annotations are already provided at [annotations folder](https://github.com/terikon/marker-animate-unobtrusive/tree/master/annotations). \r\n\r\n# Contribute\r\n\r\nUse [GitHub issues](https://github.com/terikon/marker-animate-unobtrusive/issues) and [Pull Requests](https://github.com/terikon/marker-animate-unobtrusive/pulls).\r\n\r\nIdeas are welcome as well :)\r\n\r\nTo build:\r\n\t\r\n    npm run build\r\n\r\nBefore committing, please run jshint:\r\n\r\n    npm run jshint\r\n\r\nTo run tests:\r\n\r\n    npm run test\r\n    \r\n\r\nTests reside in [tests/spec](https://github.com/terikon/marker-animate-unobtrusive/tree/master/tests/spec) folder.\r\n\r\nTests are also runnable in browser and debuggable with [tests/SpecRunner.html](\r\n<https://github.com/terikon/marker-animate-unobtrusive/tree/master/tests/SpecRunner.html>).",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/terikon/marker-animate-unobtrusive.git"
  },
  "scripts": {
    "//": "use '|| true' to prevent warning",
    "build": "npm install && grunt",
    "jshint": "grunt jshint",
    "test": "grunt test"
  },
  "title": "SlidingMarker",
  "version": "0.2.8"
}
